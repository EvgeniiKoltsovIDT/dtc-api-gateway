// Code generated by github.com/Yamashou/gqlgenc, DO NOT EDIT.

package generated

import (
	"context"
	"net/http"

	"github.com/Yamashou/gqlgenc/clientv2"
	"github.com/coretech/dtc-api-gateway/internal/app/gateway/domain"
)

type TransactionsClient interface {
	GetTransactions(ctx context.Context, filter *domain.TransactionFilter, limit *int, skip *int, interceptors ...clientv2.RequestInterceptor) (*GetTransactions, error)
}

type Client struct {
	Client *clientv2.Client
}

func NewClient(cli *http.Client, baseURL string, options *clientv2.Options, interceptors ...clientv2.RequestInterceptor) TransactionsClient {
	return &Client{Client: clientv2.NewClient(cli, baseURL, options, interceptors...)}
}

type GetTransactions_GetTransactions struct {
	TxID      string "json:\"TxID\" graphql:\"TxID\""
	TxType    string "json:\"TxType\" graphql:\"TxType\""
	Timestamp int    "json:\"Timestamp\" graphql:\"Timestamp\""
}

func (t *GetTransactions_GetTransactions) GetTxID() string {
	if t == nil {
		t = &GetTransactions_GetTransactions{}
	}
	return t.TxID
}
func (t *GetTransactions_GetTransactions) GetTxType() string {
	if t == nil {
		t = &GetTransactions_GetTransactions{}
	}
	return t.TxType
}
func (t *GetTransactions_GetTransactions) GetTimestamp() int {
	if t == nil {
		t = &GetTransactions_GetTransactions{}
	}
	return t.Timestamp
}

type GetTransactions struct {
	GetTransactions []*GetTransactions_GetTransactions "json:\"GetTransactions\" graphql:\"GetTransactions\""
}

func (t *GetTransactions) GetGetTransactions() []*GetTransactions_GetTransactions {
	if t == nil {
		t = &GetTransactions{}
	}
	return t.GetTransactions
}

const GetTransactionsDocument = `query GetTransactions ($filter: TransactionFilter, $limit: Int, $skip: Int) {
	GetTransactions(filter: $filter, limit: $limit, skip: $skip) {
		TxID
		TxType
		Timestamp
	}
}
`

func (c *Client) GetTransactions(ctx context.Context, filter *domain.TransactionFilter, limit *int, skip *int, interceptors ...clientv2.RequestInterceptor) (*GetTransactions, error) {
	vars := map[string]any{
		"filter": filter,
		"limit":  limit,
		"skip":   skip,
	}

	var res GetTransactions
	if err := c.Client.Post(ctx, "GetTransactions", GetTransactionsDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

var DocumentOperationNames = map[string]string{
	GetTransactionsDocument: "GetTransactions",
}
