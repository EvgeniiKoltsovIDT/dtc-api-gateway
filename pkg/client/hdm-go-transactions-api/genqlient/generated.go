// Code generated by github.com/Khan/genqlient, DO NOT EDIT.

package genqlient

import (
	"context"

	"github.com/Khan/genqlient/graphql"
	"github.com/coretech/dtc-api-gateway/internal/app/gateway/domain"
)

// GetTransactionsResponse is returned by GetTransactions on success.
type GetTransactionsResponse struct {
	GetTransactions []domain.Transaction `json:"GetTransactions"`
}

// GetGetTransactions returns GetTransactionsResponse.GetTransactions, and is useful for accessing the field via an interface.
func (v *GetTransactionsResponse) GetGetTransactions() []domain.Transaction { return v.GetTransactions }

// __GetTransactionsInput is used internally by genqlient
type __GetTransactionsInput struct {
	Filter *domain.TransactionFilter `json:"filter"`
	Limit  *int                      `json:"limit"`
	Skip   *int                      `json:"skip"`
}

// GetFilter returns __GetTransactionsInput.Filter, and is useful for accessing the field via an interface.
func (v *__GetTransactionsInput) GetFilter() *domain.TransactionFilter { return v.Filter }

// GetLimit returns __GetTransactionsInput.Limit, and is useful for accessing the field via an interface.
func (v *__GetTransactionsInput) GetLimit() *int { return v.Limit }

// GetSkip returns __GetTransactionsInput.Skip, and is useful for accessing the field via an interface.
func (v *__GetTransactionsInput) GetSkip() *int { return v.Skip }

// The query or mutation executed by GetTransactions.
const GetTransactions_Operation = `
query GetTransactions ($filter: TransactionFilter, $limit: Int, $skip: Int) {
	GetTransactions(filter: $filter, limit: $limit, skip: $skip) {
		TxID
		TxType
		Timestamp
	}
}
`

func GetTransactions(
	ctx_ context.Context,
	client_ graphql.Client,
	filter *domain.TransactionFilter,
	limit *int,
	skip *int,
) (*GetTransactionsResponse, error) {
	req_ := &graphql.Request{
		OpName: "GetTransactions",
		Query:  GetTransactions_Operation,
		Variables: &__GetTransactionsInput{
			Filter: filter,
			Limit:  limit,
			Skip:   skip,
		},
	}
	var err_ error

	var data_ GetTransactionsResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}
